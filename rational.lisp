; (defmacro compile-rat (num den) `(cons ,num ,den))
(defmacro compile-rat (num den) (list 'cons num den))
(defmacro is-rat-1 (rat) `(and (numberp (car ,rat)) (numberp (cdr ,rat))))
(defmacro is-rat-2 (num den) `(and (numberp ,num) (numberp ,den)))
(defmacro is-complex-2 (num den) `(and (complexp ,num) (complexp ,den)))
; (defmacro is-rat-type (rat type_) `(and (typep (car ,rat) type_) (typep (cdr ,rat) type_)))
; (defmacro is-rat (&body body) `(is-rat ,@body))
(defmacro print-rat-number (rat)
  `(progn
    (TERPRI) ; newline
    (write (car ,rat))
    (write (intern ,"/"))
    (write (cdr ,rat))))
(defmacro print-complex-number (complex_)
  `(write (format NIL "(~f, ~f)" (realpart ,complex_) (imagpart ,complex_))))
     
(defmacro print-return (x)
  `(progn (TERPRI) (print a) a))

; (defparameter FLOAT-PRECISION)
(defun gcd-euclid (a b)
  (cond ((< (abs b) 0.001) a)
        (T (gcd-euclid b (rem a b)))
        ))

(defun make-rat (num den)
  (if (is-rat-2 num den)
    (cond ((= num 0) 0)
          ((= den 0) NIL)
          ; (T (compile-rat 1 1)))
          (T ((lambda (x) (compile-rat (floor num x) (floor den x)))
              ((lambda (gcd_) (if (< den 0) (- gcd_) gcd_))
               (gcd-euclid num den)))))
    NIL))

(defun make-rat-complex (num den)
  (if (is-rat-2 num den)
    (cond ((= num 0) 0)
          ((= den 0) NIL)
          ; (T (compile-rat 1 1)))
          (T (compile-rat num den)))
    NIL))

(defun print-rat (rat)
  (if (is-rat-1 rat)
    (print-rat-number rat)
    ; (print (format NIL "~d / ~d" (car rat) (cdr rat)))
    (print "NAN")))



(print-rat (make-rat NIL 2))
(print-rat (make-rat 1 NIL))
(print-rat (make-rat 1 2))
(print-rat (make-rat -1 2))
(print-rat (make-rat 1 -2))
(print-rat (make-rat -1 -2))
(print-rat (make-rat 2 4))
(print-rat (make-rat 4 8))
(print-rat (make-rat 8 16))
(print-rat (make-rat 2 3))
(print-rat (make-rat 4 6))
(print-rat (make-rat 6 9))
(print-rat (make-rat 8 12))
(print "Real:")
(print-rat (make-rat 0.45 0.2))
(print-rat (make-rat 12 0.5))
; (print "Complex:")
; (print-rat (make-rat-complex #C(4 5) #C(2 3)))
; (print-complex-number #C(4 5))
